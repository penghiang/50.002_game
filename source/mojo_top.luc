module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    input button[6],
    output io_pin[6]
  ) {
  
  sig rst;                  // reset signal
  seed_translator translator;
  seed_rotator rotator;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    ram ram;
    .rst(rst){  //clock and rst not really required in each individual Source.
      count clock;
      count pause;
      shortcount shortpause;
      fsm state = {START, SHOW, PLAY, CORRECT, ADD, READ, READBUFFER, WRITE, WRITEBUFFER, BUZZ};
      dff mem_pointer[5];
      dff current_pointer[5];
      dff current_rotation;
      dff current_memory[8];
      dff current_input[5];
    }
  }  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led[7:0] = 0;           // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led[0] = 8b0;
    io_led[1] = 8h0;    // turn LEDs off
    io_led[2] = 8b0;
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    rotator.direction = 0;
    rotator.current_data = 0;
    
    io_pin[5:0] = 0;
        
    ram.write_en = 0;       
    ram.write_data = 0;
    ram.address = 0; 
    clock.reset = 0;      // another reset that works similar to rst.
    pause.reset = 0;
    shortpause.reset = 0;
    translator.seed = 0;
    
    io_led[1][4:0] = button[4:0];
    
    case(state.q){
      state.START:
        current_pointer.d = 0;
        io_pin[4:0] = 5b11111;
        if (button[5]){      // io_button[4]
          state.d = state.ADD;
        } else if (io_button[0]) {
          io_pin[4:0] = 0;
        } else {
        }
      state.ADD:
        translator.seed = clock.seed;  // clock is only used for seed
        pause.reset = 1;        // without this, the first stage would be randomly cut shorter than other stages. 
        if (clock.seed == b101 | clock.seed == b110){
          current_rotation.d = clock.seed[1];
          state.d = state.READ;
        } else {
          ram.address = mem_pointer.q;
          mem_pointer.d = mem_pointer.q+1;
          ram.write_data = translator.out;
          ram.write_en = 1;
          current_pointer.d = 0;
          state.d = state.SHOW;
        }
      state.SHOW:
        ram.address = current_pointer.q;
        io_led[2][7] = 1;
        io_led[0] = ram.read_data;
        io_pin[4:0] = ram.read_data[4:0]; // io_led[0] = ram.read_data;
        if(pause.clock){
          if(current_pointer.q + 1 >= mem_pointer.q){
            current_pointer.d = 0;
            state.d = state.PLAY;
          } else {
            current_pointer.d = current_pointer.q + 1;
          }
        } else {
        }
      state.READ:
        ram.write_en = 0;
        ram.address = current_pointer.q;
        current_memory.d = ram.read_data;
        state.d = state.READBUFFER;
      state.READBUFFER:
        rotator.direction = current_rotation.q;
        rotator.current_data = current_memory.q;
        ram.address = current_pointer.q;
        state.d = state.WRITE;
      state.WRITE:
        pause.reset = 1;
        rotator.direction = current_rotation.q;
        rotator.current_data = current_memory.q;
        ram.address = current_pointer.q;
        ram.write_data = rotator.rotated_data;
        ram.write_en = 1;
        if (current_pointer.q + 1 >= mem_pointer.q){
          current_pointer.d = 0;
          state.d = state.SHOW;
        } else { 
          state.d = state.WRITEBUFFER;
        }
      state.WRITEBUFFER:
        ram.write_en = 0;
        current_pointer.d = current_pointer.q + 1;
        ram.address = current_pointer.q+1;        //THIS IS VERY IMPORTANT BECAUSE OF STUFF
        state.d = state.READ;
      state.PLAY:
        io_led[2][6] = 1;
        ram.address = current_pointer.q;
        //current_input.d[4] = io_button[3];  // L
        //current_input.d[3] = io_button[2];  // D
        //current_input.d[2] = io_button[4];  // R
        //current_input.d[1] = io_button[0];  // U
        //current_input.d[0] = io_button[1];  // C
        current_input.d[4:0] = button[4:0];
        //io_led[1] = io_button[4:0];
        io_pin[4:0] = button[4:0];
        pause.reset = 1;          // a duplicate clock, this is for delaying, so that it doesn't affect the seed.
        if(current_input.q != 5b0){
          if(current_input.q == ram.read_data[4:0]){
            shortpause.reset = 1;
            state.d = state.CORRECT;
          } else {
            current_input.d = 0;
            mem_pointer.d = 0;
            current_pointer.d = 0;
            state.d = state.BUZZ;
          }
        } else {
        }
      state.CORRECT:
        current_input.d = 0;
        if(shortpause.clock){
          current_pointer.d = current_pointer.q + 1;
          if (current_pointer.q + 1 >= mem_pointer.q){
            current_pointer.d = 0;
            state.d = state.ADD;
          } else {
            state.d = state.PLAY;
          }
        } else {
        }
      state.BUZZ:
        io_pin[5] = 1;
        if (pause.clock) {
          state.d = state.START;
        }
    }   
  }
}